import java.util.*;
import edu.duke.*;
import java.io.*;

public class EarthQuakeClient2 {
    
    public EarthQuakeClient2() {
        // TODO Auto-generated constructor stub
    }

    public ArrayList<QuakeEntry> filter (ArrayList<QuakeEntry> quakeData, 
                                         Filter f) { 
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe : quakeData) { 
            if (f.satisfies(qe)) { 
                answer.add(qe); 
            }
            //if (answer.size() ==0) {
                //return answer.size();
            //}
        } 
        return answer;
    } 

    public void quakesWithFiltertest() { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        //String source = "data/nov20quakedatasmall.atom";
        String source = "data/nov20quakedata.atom";
        
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");
        
        /*
        Filter f = new MinMagFilter(4.0); 
        ArrayList<QuakeEntry> m7  = filter(list, f); 
        for (QuakeEntry qe: m7) { 
            System.out.println(qe);
        }
        
        Filter f2 = new MagnitudeFilter(5,5.1);
        //f2.satisfies();
        ArrayList<QuakeEntry> m8  = filter(list, f2); 
                //f2.satisfies(m8);
        for (QuakeEntry qe: m8) { 
            System.out.println("magfilter "+qe);
            System.out.println(f2.getName());
        }
        
        Filter f3 = new DepthFilter (-10000,5.1);
        //f2.satisfies();
        ArrayList<QuakeEntry> m9  = filter(list, f3); 
                //f2.satisfies(m8);
        for (QuakeEntry qe: m9) { 
            System.out.println("depfilter "+qe);
        }
        
        //f2.satisfies();
        Location city = new Location(38.17, -118.82);
        Filter f4 = new DistanceFilter (1000*1000,city);
        ArrayList<QuakeEntry> m10  = filter(list, f4); 
                //f2.satisfies(m8);
        for (QuakeEntry qe: m10) { 
            System.out.println("distfilter "+qe);
            System.out.println(f4.getName());
        }
        
        String where = "any";
        String phrase = "Beatty";
        Filter f5 = new PhraseFilter (where,phrase);
        ArrayList<QuakeEntry> m11  = filter(list, f5); 
                //f2.satisfies(m8);
        for (QuakeEntry qe: m11) { 
            System.out.println("phrasefilter "+qe);
        }
        */
    }

    public void quakesWithFilter() { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        //String source = "data/nov20quakedatasmall.atom";
        String source = "data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");
        
        /*
        MatchAllFilter maf = new MatchAllFilter();
        maf.addfilter(new MagnitudeFilter(3.5,4.5));
        maf.addfilter(new DepthFilter(-55000,-20000));
        //Location city = new Location (39.7392, -104.9903);
        //maf. addfilter(new DistanceFilter(1000*1000,city));
        // 10,000,000 meters (10,000 km) from Tokyo
        //String where = "end";
        //String phrase = "a";
        //maf.addfilter(new PhraseFilter(where,phrase));
        
        ArrayList<QuakeEntry> réponse  = filter(list, maf);
        for (QuakeEntry qe: réponse) { 
            System.out.println("voici :  "+qe);
            
        }
        System.out.println("combien : "+réponse.size());
        */
    }
    
    public void testMatchAllFilter () { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");
        
        
        MatchAllFilter maf = new MatchAllFilter();
        maf.addfilter(new MagnitudeFilter(1.0,4.0,"Magnitude"));
        maf.addfilter(new DepthFilter(-180000  ,-30000,"Depth"));
        //Location city = new Location(35.42, 139.43);
        //maf. addfilter(new DistanceFilter(10000*10000,city));
        // 10,000,000 meters (10,000 km) from Tokyo
        String where = "any";
        String phrase = "o";
        maf.addfilter(new PhraseFilter(where,phrase,"Phrase"));
        
        ArrayList<QuakeEntry> réponse  = filter(list, maf);
        for (QuakeEntry qe: réponse) { 
            System.out.println("voici :  "+qe);
        }
        System.out.println("combien : "+réponse.size());
    }
    
    public void testMatchAllFiltername () { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedatasmall.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");
        
        
       MatchAllFilter maf = new MatchAllFilter();
       maf.addfilter(new MagnitudeFilter(3.0,5.0,"Magnitude"));
       Location city = new Location(51.7308,-34.1153);
       maf.addfilter(new DistanceFilter(3000*1000, city, "Distance"));
       maf.addfilter(new PhraseFilter("any", "i", "Phrase"));
       System.out.println("Filters used are: " + maf.getName());

       ArrayList<QuakeEntry> réponse  = filter(list, maf);
       for (QuakeEntry qe: réponse) { 
           System.out.println("voici :  "+qe);
        }
    }
    
    public void testMatchAllFilter2 () { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");
        
        
        MatchAllFilter maf = new MatchAllFilter();
        maf.addfilter(new MagnitudeFilter(0.0,5.0,"Magnitude"));
        //maf.addfilter(new DepthFilter(-100000.0 ,-10000.0));
        Location city = new Location(55.7308, 9.1153);
        maf. addfilter(new DistanceFilter(1732*1732,city,"Distance"));
        // 10,000,000 meters (10,000 km) from Tokyo
        String where = "any";
        String phrase = "e";
        maf.addfilter(new PhraseFilter(where,phrase,"Phrase"));
        
        ArrayList<QuakeEntry> réponse  = filter(list, maf);
        for (QuakeEntry qe: réponse) { 
            System.out.println("voici :  "+qe);
        }
        System.out.println("combien : "+réponse.size());
    }
    
    public void createCSV() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "../data/nov20quakedata.atom";
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: "+list.size());
    }

    public void dumpCSV(ArrayList<QuakeEntry> list) {
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }
    }

}
